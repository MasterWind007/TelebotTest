import telebot as tb
from telebot import types
import random
import ocrmodule
from io import BytesIO
import os
from barcode import BarCode
from gptai import GptChat
from yacloudviz import YandexOCR
from yasprec import YaVoiceToText
from yaspsyn import YaVoiceSyn
from pathlib import Path


ocr_exe_file = [Path('C:/','Program Files','Tesseract-OCR','tesseract.exe'),
                Path('D:/','Program Files','Tesseract-OCR','tesseract.exe')]
ocr_image_file = Path('Comon','Tmp','ocrimg.jpg')
bar_image_file = Path('Comon','Tmp','barcode.jpg')
com_res_path ={'audio': Path('Comon','Res','Audio'), 
               'docs': Path('Comon','Res','Docs'), 
               'pix': Path('Comon','Res','Pix'),
               'video': Path('Comon','Res','Video')}
tmp_path =    {'audio' : Path('Comon','Tmp','Audio'),
               'docs': Path('Comon','Tmp','Docs'),
               'pix': Path('Comon','Tmp','Pix'),
               'video': Path('Comon','Tmp','Video')} 
usr_root_path = Path('Users')
usr_part_path = {'audio':'Audio','docs':'Docs','pix':'Pix','video':'Video'} 
voice_path = Path('speech.ogg')
voice_out_json = Path('audioout.json')
syn_voice_path = Path('syn_voie.ogg')

ocr = YandexOCR()
voice = YaVoiceToText()
voice_syn = YaVoiceSyn(syn_voice_path)

# ocr = ocrmodule.OcrClass(ocr_exe_file[0]) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ teseract
gpt = GptChat() #–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å GPT4 —á–∞—Ç
gpt.get_key()
barcode = BarCode() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à—Ç—Ä–∏—Ö –∏ QR –∫–æ–¥–∞–º–∏

class ChatBot:
    def __init__(self, bt):
        self.auth = False
        self.chat_mode = '' #gpt_keymode , barmode, ocrmode , gpt_voicemode
        self.ocr_image_file = ocr_image_file
        self.bar_image_file = bar_image_file 
        self.bot = tb.TeleBot(bt)

        self.com_res_path   = com_res_path # –ü—É—Ç–∏ –∫ –æ–±—â–∏–º –ø–∞–ø–∫–∞–º —Ä–µ—Å—É—Ä—Å–æ–≤
        self.tmp_path       = tmp_path #–ü—É—Ç–∏ –∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–∞–ø–∫–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        self.usr_root_path  = usr_root_path
        self.usr_part_path  = usr_part_path # –ü—É—Ç—å –∫ –ø–∞–ø–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.voice_path     = voice_path # –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        self.voice_out_json = voice_out_json # –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É —Å —Ç–µ–∫—á—Ç–æ–º json

        self.chat_answ     = {'mas_hello' :['–ü—Ä–∏–≤–µ—Ç.', '–î–µ–Ω—å –¥–æ–±—Ä—ã–π!', '–î–æ–±—Ä—ã–π –¥–µ–Ω—å!', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!', '–î–æ–±—Ä–æ–≥–æ –¥–Ω—è!'],
                              'mas_del'   :['–ó–∞–µ–±–æ–∫','–ù–æ—Ä–º', '–ü–æ–π–¥–µ—Ç', '–•–æ—Ä–æ—à–æ', '–û—Ç–ª–∏—á–Ω–æ', '–õ—É—á—à–µ –Ω–µ –±—ã–≤–∞–µ—Ç!', '–õ—É—á—à–µ –≤—Å–µ—Ö!', '–ö–∞–∫ –æ–±—ã—á–Ω–æ'],
                              'mas_nastr' :['–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ!', '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–µ!', '–†–∞–±–æ—á–µ–µ...', '–í–ø–æ–ª–Ω–µ —Å–Ω–æ—Å–Ω–æ–µ...'],
                              'mas_noUnd' :['–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è ', '–°–ø—Ä–æ—Å–∏ —á—Ç–æ –Ω–∏ –±—É–¥—å –µ—â–µ...', '–¢—ã –æ —á–µ–º ?', '–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ...', '–ê–∫–≤–∞–ª–∞–Ω–≥...'],
                              'mas_Ok'    :['–û–∫', '–•–æ—Ä–æ—à–æ.','–í—ã–ø–æ–ª–Ω—è—é...' ,'–ë—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ!' ,'–ö–∞–∫ —Å–∫–∞–∂–µ—à—å...' ,'–ü–æ–Ω—è–ª, —Å–¥–µ–ª–∞—é.'],
                              'mas_sendf' :['–õ–æ–≤–∏.', '–ü–æ–ª—É—á–∏ —Ä–∞—Å–ø–∏—à–∏—Å—å.', '–ì–æ—Ç–æ–≤–æ.', '–§–∞–π–ª –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω.', '–í–æ—Ç –æ–Ω...', '–ó–∞–±–∏—Ä–∞–π.', '–¢–æ —á—Ç–æ –ø—Ä–æ—Å–∏–ª...', '–í–æ—Ç...'],
                              'mas_No'    :['–¢–∞–∫ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.' ,'–≠—Ç–æ —Ç–∞–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.' ,'–ù–µ—Ç!' ,'–ù–µ –≤—ã–π–¥–µ—Ç!' ,'–ù–µ –≤ —ç—Ç–æ—Ç —Ä–∞–∑.' ,'–ù–µ —Å–µ–π—á–∞—Å.' ,'–Ø —ç—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–µ –±—É–¥—É!', '–Ø –Ω–µ —Å—Ç–∞–Ω—É —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å!']
                            }
        self.chat_quest     = { 'say_hwy_list':['–∫–∞–∫ —Ç—ã', '–∫–∞–∫ —Å–∞–º', '–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ –∂–∏–∑–Ω—å', '–∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞','–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å', '–∫–∞–∫ —Ç—ã –ø–æ–∂–∏–≤–∞–µ—à—å', '–≤—Å–µ –Ω–æ—Ä–º', '–≤—Å–µ —Ö–æ—Ä–æ—à–æ'],
                                'say_hi_list'  :['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–¥–æ–±—Ä–æ–≥–æ –¥–Ω—è', '–¥–µ–Ω—å –¥–æ–±—Ä—ã–π', '–∑–¥–æ—Ä–æ–≤–∞', '–∑–¥–æ—Ä–æ–≤', '—É—Ç—Ä–æ –¥–æ–±—Ä–æ–µ', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é'],
                                'say_nst_list' :['–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–∫–∞–∫ —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–π', '—á—Ç–æ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º', '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∫', '—á—Ç–æ —Å –Ω–∞—Å—Ç—Ä–æ–µ–º' ]
                              }
        self.chat_logon     = { 'acc_no': ['–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å!', '–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!', '–Ø —Å –í–∞–º–∏ –Ω–µ –∑–Ω–∞–∫–æ–º, –∞–≤—Ç—Ä–æ–∏–∑—É–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.', '–ù–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é —Å –Ω–∞–∑–Ω–∞–∫–æ–º—Ü–∞–º–∏, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å!', '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!'],
                                'acc_yes':['–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!', '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!', '–ö–∞–∫ –í–∞–º —É–¥–∞–ª–æ—Å—å —É–≥–∞–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å ?', '–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!'] 
                              }

        self.main_cmd       = [types.BotCommand("start", "–ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞"), types.BotCommand("menu", "–í—ã–∑–æ–≤ –º–µ–Ω—é")] # –≠–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é –∫–æ–º–∞–Ω–¥.
        self.main_btns      = {}
        self.inln_btns      = {'main_btns':[types.InlineKeyboardButton("–í—ã–∑–æ–≤ –º–µ–Ω—é üìñ", callback_data='menu'), # –≠–ª–µ–º–µ–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä
                                # types.InlineKeyboardButton("–ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã üìÑ", callback_data='mydoclist'),
                                # types.InlineKeyboardButton("–ú–æ–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ üèû", callback_data='mypixlist'),
                                types.InlineKeyboardButton("–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç üèû", callback_data='myocr'),
                                types.InlineKeyboardButton("–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ë–∞—Ä–∫–æ–¥ ü™™", callback_data='mybarcode'),
                                types.InlineKeyboardButton(text='–ù–∞—à —Å–∞–π—Ç üßª', web_app=types.WebAppInfo('https://ya.ru')),
                                types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç ü™†', switch_inline_query="Telegram")]
                               }
        

    class CommandArgs:  #–∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: /getpix photo.jpg 
        def __init__(self, cd='', cmd=''):
            self.call_data = cd
            self.comm_data = cmd
        
        def is_exist(self, cd='', cmd=''): #  –µ—Å—Ç—å –ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞
            self.call_data = cd
            self.comm_data = cmd+' '
            return self.call_data.startswith(cmd)#, 
        
        def arg_name(self):    #–≤—ã–¥–µ–ª–∏—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥—ã –ø–∞—Ä–∞–º–µ—Ç—Ä
            tab = len(self.comm_data)
            return self.call_data[tab:]
        
    def autorization(self, message): # –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            # markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            # exit = types.KeyboardButton('–í—ã—Ö–æ–¥')
            # markup.add(exit)
            sent = self.bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É')
            self.bot.register_next_step_handler( sent, self.login)

    def login(self, message): # –õ–æ–≥–∏–Ω
            if message.text == 'Pass':
                self.del_last_msg(message)
                self.bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!')
                self.welcome(message)
                self.auth = True
            else:
                self.auth = False
                self.del_last_msg(message)
                sent = self.bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü—Ä–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
                self.bot.register_next_step_handler(sent, self.login)
 
    def build_menu(self, buttons, n_cols,  header_buttons=None, footer_buttons=None): #—Å–±–æ—Ä–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
        if header_buttons:
            menu.insert(0, [header_buttons])
        if footer_buttons:
            menu.append([footer_buttons])
        return menu

    def build_smenu(self): #—Å–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é.
        self.bot.set_my_commands(self.main_cmd)

    def list_dir (self, dir, ext=''): # –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –∏–∑ —É–∫–∞–∑–∞–Ω–æ–π –ø–∞–ø–∫–∏ 
        content = os.listdir(dir)
        f_list = []
        for file in content:
            if os.path.isfile(os.path.join(dir, file)) and file.endswith(ext):
                f_list.append(file)
        return  f_list     

    def rand_ansv(self, mas_ansv): # –≤—ã–¥–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        return random.choice(mas_ansv)

    def my_pixlist(self, message):#–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫
        pix_path = f'Users/{message.chat.first_name}_{message.chat.last_name}/Pix'
        pix_list = self.list_dir(pix_path,'.jpg')
        btn_list = []
        for file_nm in pix_list:
            btn_list.append(types.InlineKeyboardButton(file_nm, callback_data='getpix '+file_nm))
        btn_list.append(types.InlineKeyboardButton("–ú–µ–Ω—é. üìñ", callback_data='menu'))
        reply_markup = types.InlineKeyboardMarkup(self.build_menu(btn_list, n_cols=1),row_width=1)
        # pix_content = '–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫:\n<b>'
        # for file_nm in pix_list:
        #     pix_content += file_nm+'\n'
        # pix_content+= '</b>'    
        txt='–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫, –∫–∞–∫ –ø—Ä–æ—Å–∏–ª:'
        with open(Path(self.com_res_path["pix"],'M1.png'), 'rb') as img:
            self.bot.send_photo(message.chat.id, img, caption=txt ,reply_markup=reply_markup, parse_mode='HTML' )
        
    def my_doclist(self, message): # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫
        path = f'Users/{message.chat.first_name}_{message.chat.last_name}/Docs'
        list = self.list_dir(path)
        btn_list = []
        for file_nm in list:
            btn_list.append(types.InlineKeyboardButton(file_nm, callback_data='getdoc '+file_nm))
        btn_list.append(types.InlineKeyboardButton("–ú–µ–Ω—é. üìñ", callback_data='menu'))
        reply_markup = types.InlineKeyboardMarkup(self.build_menu(btn_list, n_cols=1),row_width=1)
        txt='–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫–∞–∫ –ø—Ä–æ—Å–∏–ª:'
        with open(Path(self.com_res_path["pix"],'M1.png'), 'rb') as img:
            self.bot.send_photo(message.chat.id, img, caption=txt ,reply_markup=reply_markup, parse_mode='HTML' )

    def sendpix(self, message, fname): # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —á–∞—Ç
        btn_list = []
        btn_list.append(types.InlineKeyboardButton("–ú–µ–Ω—é. üìñ", callback_data='menu'))
        reply_markup = types.InlineKeyboardMarkup(self.build_menu(btn_list, n_cols=1),row_width=1)
        path = Path(f'Users/{message.chat.first_name}_{message.chat.last_name}/Pix/')
        path = Path(path,fname)
        with open(path, 'rb') as img:
            self.bot.send_photo(message.chat.id, img, caption=self.rand_ansv(self.chat_answ['mas_sendf']),reply_markup=reply_markup)

       

    def sendfile(self, message, fname): # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ —á–∞—Ç
        btn_list = []
        btn_list.append(types.InlineKeyboardButton("–ú–µ–Ω—é. üìñ", callback_data='menu'))
        reply_markup = types.InlineKeyboardMarkup(self.build_menu(btn_list, n_cols=1),row_width=1)
        path = f'Users/{message.chat.first_name}_{message.chat.last_name}/Docs/'
        path+=fname
        with open(path, 'rb') as tmp:
            obj = BytesIO(tmp.read())
            obj.name = fname
            self.bot.send_document(message.chat.id, document=obj, caption=self.rand_ansv(self.chat_answ['mas_sendf'],reply_markup=reply_markup))

    def welcome(self, message): # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        txt=f'–ü—Ä–∏–≤–µ—Ç { message.from_user.first_name}!\r\n\r\n\
–Ø —É—á–µ–±–Ω—ã–π –±–æ—Ç,\n\
–Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å\n\
–æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤—ã–∫–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n\
–º–Ω–µ –ø–æ–¥–æ–±–Ω—ã—Ö.\n\n\
–ú–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º\n\
–±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è, –æ–±—Ä–∞—Å—Ç–∞—è\n\
–Ω–æ–≤—ã–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!\n\n\
–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, –º–æ–∂–Ω–æ\n\
–≤—ã–∑–≤–∞—Ç—å –Ω–∞–±—Ä–∞–≤ /menu  –∏–ª–∏ –≤—ã–±—Ä–∞–≤ \n\
—ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é —á–∞—Ç–∞.\n\n\
<b>–ê –µ—â–µ —Å–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ\n\
–±–æ–ª—Ç–∞—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã, —Ç–∞–∫ –∫–∞–∫\n\
—è —è–≤–ª—è—é—Å—å —Ç—Ä–∞–Ω—Å–ª—è—Ç–æ—Ä–æ–º —á–∞—Ç–∞ GPT4</b>' 
        with open(Path(self.com_res_path["pix"],'M4.png'), 'rb') as img:
            self.bot.send_photo(message.chat.id, img, caption=txt , parse_mode='HTML' )

    def main_menu(self, message): # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        reply_markup = types.InlineKeyboardMarkup(self.build_menu(self.inln_btns['main_btns'], n_cols=2),row_width=1)
        self.bot.send_message(chat_id=message.chat.id, text='–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:', reply_markup=reply_markup)

    def save_pix_file(self, message, path):
            file_info = self.bot.get_file(message.photo[len(message.photo) - 1].file_id)
            from_chat_file = self.bot.download_file(file_info.file_path)            
            with open(path, 'wb') as new_file:
                new_file.write(from_chat_file)
            self.del_last_msg(message)
            self.bot.send_message(chat_id=message.chat.id, text='...–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª!')
    
    def save_doc_file(self, message, path):
            file_info = self.bot.get_file(message.document.file_id)
            downloaded_file = self.bot.download_file(file_info.file_path)
            with open(path, 'wb') as new_file:
                new_file.write(downloaded_file)
            self.del_last_msg(message)
            self.bot.send_message(chat_id=message.chat.id, text='...–¥–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª!')

    def save_voice_file(self, message, path): #–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞ –¥–∏—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            file_info = self.bot.get_file(message.voice.file_id)
            downloaded_file = self.bot.download_file(file_info.file_path)        
            with open(path, 'wb') as new_file:
              new_file.write(downloaded_file)        
                     

    def handler_file(self, message): # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ , –ø—Ä–∏—Å–ª–∞–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —á–∞—Ç
        if message.content_type == 'photo':
            if self.chat_mode == 'ocrmode':
                path = self.ocr_image_file
                self.save_pix_file(message, path)
                self.bot.send_message(chat_id=message.chat.id, text='–ü—ã—Ç–∞—é—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å...')
                self.ocr_to_str(message)
                self.chat_mode = ''                    
                return
            elif self.chat_mode =='barmode':
                path = self.bar_image_file
                self.save_pix_file(message, path)
                self.bar_to_str(message)
                self.chat_mode = ''
                return
            elif self.chat_mode == 'gpt_keymode':
                if gpt.new_key(key=message.text):
                    self.chat_mode = ''
                    self.del_last_msg(message)
                    self.bot.send_message(chat_id=message.chat.id, text='–û–∫')
                    return
                else:
                    self.chat_mode = ''
                    self.del_last_msg(message)
                    self.bot.send_message(chat_id=message.chat.id, text='–û—à–∏–±–∫–∞!')
            else:
                file_info = self.bot.get_file(message.photo[len(message.photo) - 1].file_id)
                Path(f'Users/{message.from_user.first_name}_{message.from_user.last_name}/Pix/').mkdir(parents=True, exist_ok=True)
                path = Path(f'Users/{message.from_user.first_name}_{message.from_user.last_name}/Pix/{message.chat.id}_' + file_info.file_path.replace('photos/', ''))
                self.save_pix_file(message, path)
        elif message.content_type == 'document':
            Path(f'Users/{message.from_user.first_name}_{message.from_user.last_name}/Docs/').mkdir(parents=True, exist_ok=True)
            path = Path(f'Users/{message.from_user.first_name}_{message.from_user.last_name}/Docs/' + message.document.file_name)
            self.save_doc_file(self, message, path)
        elif message.content_type == 'voice':
            if self.chat_mode == 'voice_rec':
                Path(f'Users/{message.from_user.first_name}_{message.from_user.last_name}/Voice/').mkdir(parents=True, exist_ok=True)
                path = Path(f'Users/{message.from_user.first_name}_{message.from_user.last_name}/Voice/' + message.voice.file_name)
                self.save_voice_file(message, path)
            else:
                self.save_voice_file(message, self.voice_path)
                text = voice.voice_to_string(self.voice_path, self.voice_out_json)
                self.chat_mode = ''
                self.bot.send_message(message.chat.id, gpt.answer(text))
        elif message.content_type == 'text':
            if self.chat_mode == 'text_syn':
                voice_syn.text_to_voice(message.text)
                self.bot.sendVoice(message.chat.id, syn_voice_path)
                self.chat_mode = ''

  
    def swchat(self, message): # –ü–µ—Ä–µ–π—Ç–∏ –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç
        markup = types.InlineKeyboardMarkup()
        switch_button = types.InlineKeyboardButton(text='–ñ–º–∏ —Å—é–¥–∞!', switch_inline_query="Telegram")
        markup.add(switch_button)
        self.bot.send_message(message.chat.id, "–ü–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à —á–∞—Ç", reply_markup = markup)

    def url(self, message): #–û—Ç–ø—Ä–∞–≤–∫–∞ Url –≤ —á–∞—Ç
        # markup = types.InlineKeyboardMarkup()
        # btn_my_site= types.InlineKeyboardButton(text='–ù–∞—à —Å–∞–π—Ç', url='https://ya.ru')
        # markup.add(btn_my_site)
        txt = "–í–æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–∞–º —Å—Å—ã–ª–∫–∏:\n\
    <a href='https://yndex.ru/'>–Ø–Ω–¥–µ–∫—Å</a>\n\
    <a href='https://coogle.com/'>Google</a>"
        self.bot.send_message(message.chat.id, text=txt, parse_mode="HTML")#, reply_markup = markup)    
    
    def ocr_mode_on(self, message):
        self.chat_mode = 'ocrmode'
        self.bot.send_message(message.chat.id, text='–û–∂–∏–¥–∞—é —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º.')


    def bar_mode_on(self, message):
        self.chat_mode = 'barmode' 
        self.bot.send_message(message.chat.id, text='–û–∂–∏–¥–∞—é —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –±–∞—Ä–∫–æ–¥–æ–º.')
    
    def gptk_mode_on(self, message):
          self.chat_mode = 'gpt_keymode'
          self.bot.send_message(message.chat.id, text='–û–∂–∏–¥–∞—é –≤–≤–æ–¥–∞ API Key...')
    
    def voice_rec(self, message):
          self.chat_mode ='voice_save' 
          self.bot.send_message(message.chat.id, text='–î–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω.')

    def text_syn (self, message):
          self.chat_mode ='text_syn'
          self.bot.send_message(message.chat.id, text='–ù–∞–ø–∏—à–∏ –∏–ª–∏ –≤—Å—Ç–∞–≤—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –æ–∑–≤—É—á–∏—Ç—å.') 

    
    def bar_to_str(self, message):
        text  = ''
        path = self.bar_image_file
        img = barcode.img_from_file(path)
        # img = barcode.draw_rect_bars(img)
        for item in barcode.decode(img):
            text += str(item.data,'utf-8') +'\n'
        # self.bot.send_photo(message.chat.id, img , caption= text)
        if text == '':
            self.bot.send_message(message.chat.id, text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.')
        self.bot.send_message(message.chat.id, text = text)

    def ocr_to_str(self,message): 
        txt = ocr.image_to_string() #–¥–ª—è —è–Ω–¥–µ–∫—Å
        # txt = ocr.image_to_string(self.ocr_image_file) –¥–ª—è tesseract
        self.bot.send_message(message.chat.id, text=txt)
        

    def say(self, message): #     –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã  –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–º –∏–ª–∏ –æ—à–∏–±–∫–µ GPT —á–∞—Ç–∞
        mess = message.text.lower() 
        if not mess.startswith('/'):
            answ = gpt.answer(message.text)
            if answ.startswith('GptErr!'):
                for i in self.chat_quest['say_hwy_list']:
                    if mess.startswith(i):
                        self.bot.send_message(message.chat.id, self.rand_ansv(self.chat_answ['mas_del']))
                        return
                for i in self.chat_quest['say_hi_list']:
                    if mess.startswith(i):
                        self.bot.send_message(message.chat.id, self.rand_ansv(self.chat_answ['mas_hello']))
                        return
                for i in self.chat_quest['say_nst_list']:
                    if mess.startswith(i):
                        self.bot.send_message(message.chat.id, self.rand_ansv(self.chat_answ['mas_nastr']))
                        return
                    else:
                        self.bot.reply_to(message, self.chat_answ['mas_noUnd'])
                        return
            self.bot.send_message(message.chat.id, gpt.answer(message.text))
            return 

            
    def del_last_msg(self, message): #  –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.bot.delete_message(message.chat.id, message.message_id)

    def cmd_hand_btn(self, call): # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–∞–Ω–¥ –æ—Ç –Ω–∞–∂–∞—Ç—ã—Ö –∫–Ω–æ–ø–æ–∫
        mess = call.data
        message = call.message
        c_arg = self.CommandArgs() # –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –æ–±—ä–µ–∫—Ç –ø–æ–ª—É—á–∞—é—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥ —á–∞—Ç–∞ 
        if   mess == "mypixlist": self.my_pixlist(message)
        elif mess == "mydoclist": self.my_doclist(message)
        elif mess == "myocr": self.ocr_mode_on(message)
        elif mess == "mybarcode": self.bar_mode_on(message)
        elif c_arg.is_exist(mess, "getpix"): self.sendpix(message,c_arg.arg_name()) # –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
        elif c_arg.is_exist(mess, "getdoc"): self.sendfile(message,c_arg.arg_name())# –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
        elif mess == 'menu': self.main_menu(message)
        # bot.answer_callback_query(call.id, show_alert=True, text="–≤—ã–∑–≤–∞–Ω–æ –º–µ–Ω—é")
    # class  ChatBot ------