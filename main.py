import argparse
import telebot as tb
from telebot import types
import random
from io import BytesIO

bot = tb.TeleBot('6140511617:AAG5Nk3kfedflop46XBKrKWQJFUcH9li7Yo')
mas_hello =   ['–ü—Ä–∏–≤–µ—Ç.', '–î–µ–Ω—å –¥–æ–±—Ä—ã–π!', '–î–æ–±—Ä—ã–π –¥–µ–Ω—å!', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!', '–î–æ–±—Ä–æ–≥–æ –¥–Ω—è!']
mas_del =     ['–ó–∞–µ–±–æ–∫','–ù–æ—Ä–º', '–ü–æ–π–¥–µ—Ç', '–•–æ—Ä–æ—à–æ', '–û—Ç–ª–∏—á–Ω–æ', '–õ—É—á—à–µ –Ω–µ –±—ã–≤–∞–µ—Ç!', '–õ—É—á—à–µ –≤—Å–µ—Ö!', '–ö–∞–∫ –æ–±—ã—á–Ω–æ']
mas_nastr =   ['–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ!', '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–µ!', '–†–∞–±–æ—á–µ–µ...', '–í–ø–æ–ª–Ω–µ —Å–Ω–æ—Å–Ω–æ–µ...']
mas_noUnd =   ['–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è ', '–°–ø—Ä–æ—Å–∏ —á—Ç–æ –Ω–∏ –±—É–¥—å –µ—â–µ...', '–¢—ã –æ —á–µ–º ?', '–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ...', '–ê–∫–≤–∞–ª–∞–Ω–≥...']
mas_Ok =      ['–û–∫', '–•–æ—Ä–æ—à–æ.','–í—ã–ø–æ–ª–Ω—è—é...' ,'–ë—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ!' ,'–ö–∞–∫ —Å–∫–∞–∂–µ—à—å...' ,'–ü–æ–Ω—è–ª, —Å–¥–µ–ª–∞—é.']
mas_sendf =   ['–õ–æ–≤–∏.', '–ü–æ–ª—É—á–∏ —Ä–∞—Å–ø–∏—à–∏—Å—å.', '–ì–æ—Ç–æ–≤–æ.', '–§–∞–π–ª –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω.', '–í–æ—Ç –æ–Ω...', '–ó–∞–±–∏—Ä–∞–π.', '–¢–æ —á—Ç–æ –ø—Ä–æ—Å–∏–ª...', '–í–æ—Ç...']
mas_No =      ['–¢–∞–∫ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.' ,'–≠—Ç–æ —Ç–∞–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.' ,'–ù–µ—Ç!' ,'–ù–µ –≤—ã–π–¥–µ—Ç!' ,'–ù–µ –≤ —ç—Ç–æ—Ç —Ä–∞–∑.' ,'–ù–µ —Å–µ–π—á–∞—Å.' ,'–Ø —ç—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–µ –±—É–¥—É!', '–Ø –Ω–µ —Å—Ç–∞–Ω—É —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å!']
mas_bmenu =   [types.BotCommand("start", "–ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞"), types.BotCommand("menu", "–í—ã–∑–æ–≤ –º–µ–Ω—é")]
button_list = [types.InlineKeyboardButton("–í—ã–∑–æ–≤ –º–µ–Ω—é üìñ", callback_data='menu'),
               types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª üìÑ", callback_data='getdoc'),
               types.InlineKeyboardButton(text='–ß–∞—Ç ü™†', switch_inline_query="Telegram"),
               types.InlineKeyboardButton(text='–ù–∞—à —Å–∞–π—Ç üßª', web_app=types.WebAppInfo('https://ya.ru')),
               types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É üèû", callback_data='getpix')]
com_res_path = ['Comon/Res/Audio/', 'Comon/Res/Docs/', 'Comon/Res/Pix/', 'Comon/Res/Video/']
com_tmp_path = ['Comon/temp/Audio/', 'Comon/temp/Docs/', 'Comon/temp/Pix/', 'Comon/temp/Video/']
usr_root_path ='Users/'
usr_part_path = ['/Audio/','/Docs/','/Pix/','/Video/']

def build_menu(buttons, n_cols,  header_buttons=None, footer_buttons=None):
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, [header_buttons])
    if footer_buttons:
        menu.append([footer_buttons])
    return menu


def rand_ansv(mas_ansv):
    return random.choice(mas_ansv)

def build_smenu():
    bot.set_my_commands(mas_bmenu)

@bot.message_handler(commands=['start'])
def main(message):
    build_smenu()
    reply_markup = types.InlineKeyboardMarkup(build_menu(button_list, n_cols=2),row_width=1)
    txt=f'–ü—Ä–∏–≤–µ—Ç { message.from_user.first_name},  –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã:'
    img = open(f'{com_res_path[2]}Photo.png', 'rb')
    bot.send_photo(message.chat.id, img, caption=txt ,reply_markup=reply_markup)
    # bot.send_message(chat_id=message.chat.id, text=f'–ü—Ä–∏–≤–µ—Ç { message.from_user.first_name},  –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã:', reply_markup=reply_markup )

# content_type= text, audio, document, photo, sticker, video, video_note,
#  voice, location, contact, new_chat_members, left_chat_member, new_chat_title,
#  new_chat_photo, delete_chat_photo, group_chat_created, supergroup_chat_created,
#  channel_chat_created, migrate_to_chat_id, migrate_from_chat_id, pinned_message,
#  web_app_data.

@bot.message_handler(content_types=['photo', 'document', 'audio', 'video'])
def handler_file(message):
    from pathlib import Path
    if message.content_type == 'photo':
        Path(f'Users/Pix/{message.from_user.first_name}_{message.from_user.last_name}/').mkdir(parents=True, exist_ok=True)
        file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        src = f'Users/{message.from_user.first_name}_{message.from_user.last_name}/{message.chat.id}_' + file_info.file_path.replace('photos/', '')
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)
    elif message.content_type == 'document':
        Path(f'Users/Docs/{message.from_user.first_name}_{message.from_user.last_name}/').mkdir(parents=True, exist_ok=True)
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        src = f'Users/{message.from_user.first_name}_{message.from_user.last_name}/{message.chat.id}_' + message.document.file_name
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)

@bot.message_handler(commands=['getpix'])
def send_pix(message):
    with open('Photo.PNG', 'rb') as img:
        bot.send_photo(message.chat.id, img)
    

@bot.message_handler(commands=['menu'])
def send_menu(message):
    build_smenu()
    reply_markup = types.InlineKeyboardMarkup(build_menu(button_list, n_cols=2),row_width=1)
    bot.send_message(chat_id=message.chat.id, text='–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:', reply_markup=reply_markup)


@bot.message_handler(commands=['getfile'])
def sendfile(message):
    with open('1.txt', 'rb') as tmp:
        obj = BytesIO(tmp.read())
        obj.name = '1.txt'
        bot.send_document(message.from_user.id, document=obj, caption=rand_ansv(mas_sendf))

@bot.message_handler(commands = ['swchat'])
def swchat(message):
    markup = types.InlineKeyboardMarkup()
    switch_button = types.InlineKeyboardButton(text='–ñ–º–∏ —Å—é–¥–∞!', switch_inline_query="Telegram")
    markup.add(switch_button)
    bot.send_message(message.chat.id, "–ü–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à —á–∞—Ç", reply_markup = markup)

@bot.message_handler(commands = ['url'])
def url(message):
    markup = types.InlineKeyboardMarkup()
    btn_my_site= types.InlineKeyboardButton(text='–ù–∞—à —Å–∞–π—Ç', url='https://ya.ru')
    markup.add(btn_my_site)
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç.", reply_markup = markup)    


@bot.message_handler()
def info(message):
    mess = message.text.lower() 
    if mess.startswith("–∫–∞–∫ —Ç—ã"):
        bot.send_message(message.chat.id, rand_ansv(mas_del))
    elif mess.startswith("–ø—Ä–∏–≤–µ—Ç"):
        bot.send_message(message.chat.id, rand_ansv(mas_hello))
    elif mess.startswith("–∫–∞–∫ –¥–µ–ª–∞"):
        bot.send_message(message.chat.id, rand_ansv(mas_del))
    elif mess.startswith("–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"):
        bot.send_message(message.chat.id, rand_ansv(mas_nastr))
    else:
        bot.reply_to(message, rand_ansv(mas_noUnd))
       
@bot.callback_query_handler(func=lambda call: True)
def commandshandlebtn(call):
    mess = call.data
    message = call.message
    if   mess == "getpix": send_pix(message)
    elif mess == 'getdoc': sendfile(message)
    elif mess == 'menu': send_menu(message)
        # bot.answer_callback_query(call.id, show_alert=True, text="–≤—ã–∑–≤–∞–Ω–æ –º–µ–Ω—é")


if __name__ == '__main__':
    bot.polling(none_stop=True)



