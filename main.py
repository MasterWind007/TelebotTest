#import argparse
import telebot as tb
from telebot import types
import random
from io import BytesIO
import os

bot = tb.TeleBot('6140511617:AAG5Nk3kfedflop46XBKrKWQJFUcH9li7Yo')
mas_hello =   ['–ü—Ä–∏–≤–µ—Ç.', '–î–µ–Ω—å –¥–æ–±—Ä—ã–π!', '–î–æ–±—Ä—ã–π –¥–µ–Ω—å!', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!', '–î–æ–±—Ä–æ–≥–æ –¥–Ω—è!']
mas_del =     ['–ó–∞–µ–±–æ–∫','–ù–æ—Ä–º', '–ü–æ–π–¥–µ—Ç', '–•–æ—Ä–æ—à–æ', '–û—Ç–ª–∏—á–Ω–æ', '–õ—É—á—à–µ –Ω–µ –±—ã–≤–∞–µ—Ç!', '–õ—É—á—à–µ –≤—Å–µ—Ö!', '–ö–∞–∫ –æ–±—ã—á–Ω–æ']
mas_nastr =   ['–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ!', '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–µ!', '–†–∞–±–æ—á–µ–µ...', '–í–ø–æ–ª–Ω–µ —Å–Ω–æ—Å–Ω–æ–µ...']
mas_noUnd =   ['–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è ', '–°–ø—Ä–æ—Å–∏ —á—Ç–æ –Ω–∏ –±—É–¥—å –µ—â–µ...', '–¢—ã –æ —á–µ–º ?', '–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ...', '–ê–∫–≤–∞–ª–∞–Ω–≥...']
mas_Ok =      ['–û–∫', '–•–æ—Ä–æ—à–æ.','–í—ã–ø–æ–ª–Ω—è—é...' ,'–ë—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ!' ,'–ö–∞–∫ —Å–∫–∞–∂–µ—à—å...' ,'–ü–æ–Ω—è–ª, —Å–¥–µ–ª–∞—é.']
mas_sendf =   ['–õ–æ–≤–∏.', '–ü–æ–ª—É—á–∏ —Ä–∞—Å–ø–∏—à–∏—Å—å.', '–ì–æ—Ç–æ–≤–æ.', '–§–∞–π–ª –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω.', '–í–æ—Ç –æ–Ω...', '–ó–∞–±–∏—Ä–∞–π.', '–¢–æ —á—Ç–æ –ø—Ä–æ—Å–∏–ª...', '–í–æ—Ç...']
mas_No =      ['–¢–∞–∫ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.' ,'–≠—Ç–æ —Ç–∞–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.' ,'–ù–µ—Ç!' ,'–ù–µ –≤—ã–π–¥–µ—Ç!' ,'–ù–µ –≤ —ç—Ç–æ—Ç —Ä–∞–∑.' ,'–ù–µ —Å–µ–π—á–∞—Å.' ,'–Ø —ç—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–µ –±—É–¥—É!', '–Ø –Ω–µ —Å—Ç–∞–Ω—É —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å!']
mas_bmenu =   [types.BotCommand("start", "–ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞"), types.BotCommand("menu", "–í—ã–∑–æ–≤ –º–µ–Ω—é")]
button_list = [types.InlineKeyboardButton("–í—ã–∑–æ–≤ –º–µ–Ω—é üìñ", callback_data='menu'),
               types.InlineKeyboardButton("–ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã üìÑ", callback_data='getdoc'),
               types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç ü™†', switch_inline_query="Telegram"),
               types.InlineKeyboardButton(text='–ù–∞—à —Å–∞–π—Ç üßª', web_app=types.WebAppInfo('https://ya.ru')),
               types.InlineKeyboardButton("–ú–æ–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ üèû", callback_data='mypixlist')]
com_res_path = ['Comon/Res/Audio/', 'Comon/Res/Docs/', 'Comon/Res/Pix/', 'Comon/Res/Video/']
com_tmp_path = ['Comon/temp/Audio/', 'Comon/temp/Docs/', 'Comon/temp/Pix/', 'Comon/temp/Video/']
usr_root_path ='Users/'
usr_part_path = ['/Audio/','/Docs/','/Pix/','/Video/']
say_hwy_list  = ['–∫–∞–∫ —Ç—ã', '–∫–∞–∫ —Å–∞–º', '–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ –∂–∏–∑–Ω—å', '–∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞','–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å', '–∫–∞–∫ —Ç—ã –ø–æ–∂–∏–≤–∞–µ—à—å', '–≤—Å–µ –Ω–æ—Ä–º', '–≤—Å–µ —Ö–æ—Ä–æ—à–æ']
say_hi_list =   ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–¥–æ–±—Ä–æ–≥–æ –¥–Ω—è', '–¥–µ–Ω—å –¥–æ–±—Ä—ã–π', '–∑–¥–æ—Ä–æ–≤–∞', '–∑–¥–æ—Ä–æ–≤', '—É—Ç—Ä–æ –¥–æ–±—Ä–æ–µ', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é']
say_nst_list =  ['–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–∫–∞–∫ —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–π', '—á—Ç–æ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º', '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∫', '—á—Ç–æ —Å –Ω–∞—Å—Ç—Ä–æ–µ–º' ]

curr_usr_msg = []

def build_menu(buttons, n_cols,  header_buttons=None, footer_buttons=None): #—Å–±–æ—Ä–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã 
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, [header_buttons])
    if footer_buttons:
        menu.append([footer_buttons])
    return menu

def list_dir (dir, ext='.txt'): # –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –∏–∑ —É–∫–∞–∑–∞–Ω–æ–π –ø–∞–ø–∫–∏ 
    content = os.listdir(dir)
    f_list = []
    for file in content:
        if os.path.isfile(os.path.join(dir, file)) and file.endswith(ext):
            f_list.append(file)
    return  f_list     

def rand_ansv(mas_ansv): # –≤—ã–¥–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö
    return random.choice(mas_ansv)

def build_smenu(): #–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é
    bot.set_my_commands(mas_bmenu)

def get_arg(call_data, cmd): # –ø–æ–ª—É—á–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã
     cmd +=' ' 
     tab = len(cmd)
     return [call_data.startswith(cmd), call_data[tab:]]

def sendpix(message, fname): # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —á–∞—Ç
    pix_path = f'Users/{message.chat.first_name}_{message.chat.last_name}/Pix/'
    pix_path+=fname
    with open(pix_path, 'rb') as img:
        bot.send_photo(message.chat.id, img)

@bot.message_handler(commands=['start']) #–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
def main(message):
    build_smenu()
    reply_markup = types.InlineKeyboardMarkup(build_menu(button_list, n_cols=2),row_width=1)
    txt=f'–ü—Ä–∏–≤–µ—Ç { message.from_user.first_name}!\r\n\r\n–ó–¥–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ \r\n–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã:'
    img = open(f'{com_res_path[2]}M4.png', 'rb')
    bot.send_photo(message.chat.id, img, caption=txt ,reply_markup=reply_markup, parse_mode='HTML' )

# content_type= text, audio, document, photo, sticker, video, video_note,
#  voice, location, contact, new_chat_members, left_chat_member, new_chat_title,
#  new_chat_photo, delete_chat_photo, group_chat_created, supergroup_chat_created,
#  channel_chat_created, migrate_to_chat_id, migrate_from_chat_id, pinned_message,
#  web_app_data.

@bot.message_handler(content_types=['photo', 'document', 'audio', 'video']) #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
def handler_file(message):
    curr_usr_msg = message 
    from pathlib import Path
    if message.content_type == 'photo':
        Path(f'Users/{message.from_user.first_name}_{message.from_user.last_name}/Pix/').mkdir(parents=True, exist_ok=True)
        file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        src = f'Users/{message.from_user.first_name}_{message.from_user.last_name}/Pix/{message.chat.id}_' + file_info.file_path.replace('photos/', '')
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)
    elif message.content_type == 'document':
        Path(f'Users/{message.from_user.first_name}_{message.from_user.last_name}/Docs/').mkdir(parents=True, exist_ok=True)
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        src = f'Users/{message.from_user.first_name}_{message.from_user.last_name}/Docs/{message.chat.id}_' + message.document.file_name
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)

@bot.message_handler(commands=['mypixlist']) #–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def my_pixlist(message):
    pix_path = f'Users/{message.chat.first_name}_{message.chat.last_name}/Pix'
    pix_list = list_dir(pix_path,'.jpg')
    btn_list = []
    for file_nm in pix_list:
        btn_list.append(types.InlineKeyboardButton(file_nm, callback_data='getpix '+file_nm))
    reply_markup = types.InlineKeyboardMarkup(build_menu(btn_list, n_cols=1),row_width=1)
    # pix_content = '–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫:\b\n<b>'
    # for file_nm in pix_list:
    #     pix_content += file_nm+'\b\n'
    # pix_content+= '</b>'    
    bot.send_message(chat_id=message.chat.id, text='–°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫, –∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏–ª–∏:\b\n'
                     , parse_mode='HTML',reply_markup=reply_markup)
    

@bot.message_handler(commands=['menu']) #–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é
def send_menu(message):
    build_smenu()
    reply_markup = types.InlineKeyboardMarkup(build_menu(button_list, n_cols=2),row_width=1)
    bot.send_message(chat_id=message.chat.id, text='–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:', reply_markup=reply_markup)


@bot.message_handler(commands=['getfile']) #–ø—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
def sendfile(message):
    with open('1.txt', 'rb') as tmp:
        obj = BytesIO(tmp.read())
        obj.name = '1.txt'
        bot.send_document(message.from_user.id, document=obj, caption=rand_ansv(mas_sendf))

@bot.message_handler(commands = ['swchat']) #–ø—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–Ω–∞—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç
def swchat(message):
    markup = types.InlineKeyboardMarkup()
    switch_button = types.InlineKeyboardButton(text='–ñ–º–∏ —Å—é–¥–∞!', switch_inline_query="Telegram")
    markup.add(switch_button)
    bot.send_message(message.chat.id, "–ü–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à —á–∞—Ç", reply_markup = markup)

@bot.message_handler(commands = ['url']) #–í—ã–¥–∞—á–∞ —Å—Å—ã–ª–∫–∏
def url(message):
    # markup = types.InlineKeyboardMarkup()
    # btn_my_site= types.InlineKeyboardButton(text='–ù–∞—à —Å–∞–π—Ç', url='https://ya.ru')
    # markup.add(btn_my_site)
    txt = "–í–æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–∞–º —Å—Å—ã–ª–∫–∏:\b\n\
 <a href='https://yndex.ru/'>–Ø–Ω–¥–µ–∫—Å</a>\b\n\
 <a href='https://coogle.com/'>Google</a>"
    bot.send_message(message.chat.id, text=txt, parse_mode="HTML")#, reply_markup = markup)    


@bot.message_handler() # –ê–Ω–∞–ª–∏–∑ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def info(message):
    mess = message.text.lower() 
    for i in say_hwy_list:
        if mess.startswith(i):
            bot.send_message(message.chat.id, rand_ansv(mas_del))
            return
    for i in say_hi_list:
        if mess.startswith(i):
            bot.send_message(message.chat.id, rand_ansv(mas_hello))
            return
    for i in say_nst_list:
        if mess.startswith(i):
            bot.send_message(message.chat.id, rand_ansv(mas_nastr))
            return
        else:
            bot.reply_to(message, rand_ansv(mas_noUnd))
            return

       
@bot.callback_query_handler(func=lambda call: True) #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ 
def commandshandlebtn(call):
    mess = call.data
    message = call.message
    if   mess == "mypixlist": my_pixlist(message)
    elif get_arg(mess, "getpix")[0]: sendpix(message, get_arg(mess, "getpix")[1])
    elif mess == 'getdoc': sendfile(message)
    elif mess == 'menu': send_menu(message)
    # bot.answer_callback_query(call.id, show_alert=True, text="–≤—ã–∑–≤–∞–Ω–æ –º–µ–Ω—é")


if __name__ == '__main__':
    bot.polling(none_stop=True)



